#!/bin/bash
# Author: Ricardo Malnati
# Creation Date: 2023-10-10
# Description: To analyze the commit content and suggest a semantic versioning tag.
# Dependencies: curl, jq

# Set API Key
API_KEY="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"

# Verify if required utilities are installed
for util in curl jq base64; do
    if ! command -v $util &> /dev/null; then
        echo "Error: $util is not installed. Exiting."
        exit 1
    fi
done

# File where the commit message is stored
COMMIT_MSG_FILE="$1"
if [ -z "$COMMIT_MSG_FILE" ]; then
    echo "Error: Commit message file not provided."
    exit 1
fi

# Capture the original commit message
ORIGINAL_COMMIT_MSG=$(cat "$COMMIT_MSG_FILE" 2>/dev/null)
if [ $? -ne 0 ]; then
    echo "Error: Could not read commit message file."
    exit 1
fi

# Verify API Key by making a simple API call
API_TEST=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $API_KEY" "https://api.openai.com/v1/engines")
if [ "$API_TEST" -ne 200 ]; then
  echo "Error: Invalid API Key. Exiting."
  exit 1
fi 

# Capture the changes staged for commit
DIFF_OUTPUT=$(git diff --cached --diff-filter=CMRTUXB)

# Prepare the JSON payload using jq
JSON_PAYLOAD=$(jq -n \
                  --arg model "gpt-3.5-turbo-16k" \
                  --arg sys_content "You are a helpful system programmed to generate a JSON-formatted commit message based on git diff output. Please provide only the JSON object containing the commit type, scope, subject, body, and footer. End of Line marks are not desired, without any newline or escape characters." \
                  --arg user_content "Based on the following git diff output, identify and describe the changes, then summarise the describing to define the full commit message in JSON format: $DIFF_OUTPUT" \
                  '{model: $model, messages: [{role: "system", content: $sys_content}, {role: "user", content: $user_content}]}')

# Make an API call to ChatGPT for analysis
API_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" -H "Authorization: Bearer $API_KEY" \
    -H "Content-Type: application/json" \
    -d "$JSON_PAYLOAD" \
    "https://api.openai.com/v1/chat/completions")

#echo "Debug
echo "Debug: Entire API Request: $JSON_PAYLOAD"
# Debug: Pretty-print the API response to check for well-formed JSON
echo "Debug: Pretty-Print API Response:"
echo "$API_RESPONSE" | jq .

# Debug: Extract the JSON-formatted commit message and print it
COMMIT_JSON=$(echo "$API_RESPONSE" | jq -r '.choices[0].message.content' 2>&1)
echo "Debug: Extracted Commit JSON: $COMMIT_JSON"

# Parse the JSON to populate the variables
COMMIT_TYPE=$(echo "$COMMIT_JSON" | jq -r '.type' 2>&1)
COMMIT_SCOPE=$(echo "$COMMIT_JSON" | jq -r '.scope' 2>&1)
COMMIT_FOOTER=$(echo "$COMMIT_JSON" | jq -r '.footer' 2>&1)

# Debug: Print the parsed variables
echo "Debug: COMMIT_TYPE: $COMMIT_TYPE"
echo "Debug: COMMIT_SCOPE: $COMMIT_SCOPE"
echo "Debug: COMMIT_FOOTER: $COMMIT_FOOTER"

exit 0