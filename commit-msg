#!/bin/bash
# Author: Ricardo Malnati
# Creation Date: 2023-10-10
# Description: To analyze the commit content and suggest a semantic versioning message.
# Dependencies: curl, jq

# Set API Key
API_KEY="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"

# Verify if required utilities are installed
for util in curl jq; do
    if ! command -v $util &> /dev/null; then
        echo "Error: $util is not installed. Exiting."
        exit 1
    fi
done

# File where the commit message is stored
COMMIT_MSG_FILE="$1"
if [ -z "$COMMIT_MSG_FILE" ]; then
    echo "Error: Commit message file not provided."
    exit 1
fi

# Capture the original commit message
ORIGINAL_COMMIT_MSG=$(cat "$COMMIT_MSG_FILE" 2>/dev/null)
if [ $? -ne 0 ]; then
    echo "Error: Could not read commit message file at: $COMMIT_MSG_FILE"
    exit 1
fi

# Verify API Key by making a simple API call
API_TEST=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $API_KEY" "https://api.openai.com/v1/engines")
if [ "$API_TEST" -ne 200 ]; then
  echo "Error: Invalid API Key. Exiting."
  exit 1
fi 

# Capture the changes staged for commit
DIFF_OUTPUT=$(git diff --cached --diff-filter=CMRTUXB)

DEFAULT_MODEL="gpt-3.5-turbo-16k"
DEFAULT_USER_CONTENT_QUESTION="You are a helpful system programmed to generate a commit message based on a description. Please provide the commit type in a short sentence of one line with maximun of 256 characteres."

# Prepare the JSON payload using jq
JSON_DIFF_OUTPUT_PAYLOAD=$(jq -n \
                  --arg model $DEFAULT_MODEL \
                  --arg sys_content "You are a helpful system programmed to generate a commit message based on git diff output. Please provide the commit type, scope, subject, body, and footer in a sentence of one line with maximun of 4096 characteres." \
                  --arg user_content "Based on the following git diff output, identify and describe the changes to define the commit message: $DIFF_OUTPUT" \
                  '{model: $model, messages: [{role: "system", content: $sys_content}, {role: "user", content: $user_content}]}')

# Make an API call to ChatGPT for analysis
API_FROM_DIFF_OUTPUT_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" -H "Authorization: Bearer $API_KEY" \
    -H "Content-Type: application/json" \
    -d "$JSON_DIFF_OUTPUT_PAYLOAD" \
    "https://api.openai.com/v1/chat/completions")

# Extract the commit message from the API response
DESCRIPTON_4096_SUGGESTION=$(echo "$API_FROM_DIFF_OUTPUT_RESPONSE" | jq -r '.choices[0].message.content' 2>/dev/null)

#echo "Debug: DESCRIPTON_4096_SUGGESTION
echo "Begin Debug: DESCRIPTON_4096_SUGGESTION:"
echo $DESCRIPTON_4096_SUGGESTION
echo "End Debug"

# Prepare the JSON payload using jq
JSON_PAYLOAD=$(jq -n \
                  --arg model "$DEFAULT_MODEL" \
                  --arg sys_content  "$DEFAULT_USER_CONTENT_QUESTION" \
                  --arg user_content "Based on the following description, identify and describe the changes to define the type of the commit message: $DESCRIPTON_4096_SUGGESTION" \
                  '{model: $model, messages: [{role: "system", content: $sys_content}, {role: "user", content: $user_content}]}')

# Make an API call to ChatGPT for analysis
API_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" -H "Authorization: Bearer $API_KEY" \
    -H "Content-Type: application/json" \
    -d "$JSON_PAYLOAD" \
    "https://api.openai.com/v1/chat/completions")

# Extract the commit type from the API response
COMMIT_TYPE_SUGGESTION=$(echo "$API_RESPONSE" | jq -r '.choices[0].message.content' 2>/dev/null)

#echo "Debug: COMMIT_TYPE_SUGGESTION
echo "Begin Debug: COMMIT_TYPE_SUGGESTION:"
echo $COMMIT_TYPE_SUGGESTION
echo "End Debug"

# Parse the JSON to populate the variables
COMMIT_TYPE=$COMMIT_TYPE_SUGGESTION

# Prepare the JSON payload using jq
JSON_PAYLOAD=$(jq -n \
                  --arg model "$DEFAULT_MODEL" \
                  --arg sys_content  "$DEFAULT_USER_CONTENT_QUESTION" \
                  --arg user_content "Based on the following description, identify and describe the changes to define the scope of the commit message: $DESCRIPTON_4096_SUGGESTION" \
                  '{model: $model, messages: [{role: "system", content: $sys_content}, {role: "user", content: $user_content}]}')

# Make an API call to ChatGPT for analysis
API_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" -H "Authorization: Bearer $API_KEY" \
    -H "Content-Type: application/json" \
    -d "$JSON_PAYLOAD" \
    "https://api.openai.com/v1/chat/completions")

# Extract the commit scope from the API response
COMMIT_SCOPE_SUGGESTION=$(echo "$API_RESPONSE" | jq -r '.choices[0].message.content' 2>/dev/null)

#echo "Debug: COMMIT_SCOPE_SUGGESTION
echo "Begin Debug: COMMIT_SCOPE_SUGGESTION:"
echo $COMMIT_SCOPE_SUGGESTION
echo "End Debug"

# Parse the JSON to populate the variables
COMMIT_SCOPE=$COMMIT_SCOPE_SUGGESTION

# Prepare the JSON payload using jq
JSON_PAYLOAD=$(jq -n \
                  --arg model "$DEFAULT_MODEL" \
                  --arg sys_content  "$DEFAULT_USER_CONTENT_QUESTION" \
                  --arg user_content "Based on the following description, identify and describe the changes to define the footer of the commit message: $DESCRIPTON_4096_SUGGESTION" \
                  '{model: $model, messages: [{role: "system", content: $sys_content}, {role: "user", content: $user_content}]}')

# Make an API call to ChatGPT for analysis
API_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" -H "Authorization: Bearer $API_KEY" \
    -H "Content-Type: application/json" \
    -d "$JSON_PAYLOAD" \
    "https://api.openai.com/v1/chat/completions")

# Extract the commit footer from the API response
COMMIT_FOOTER_SUGGESTION=$(echo "$API_RESPONSE" | jq -r '.choices[0].message.content' 2>/dev/null)

#echo "Debug: COMMIT_FOOTER_SUGGESTION
echo "Begin Debug: COMMIT_FOOTER_SUGGESTION:"
echo $COMMIT_FOOTER_SUGGESTION
echo "End Debug"

# Parse the JSON to populate the variables
COMMIT_FOOTER=$COMMIT_FOOTER_SUGGESTION

if [ "$COMMIT_TYPE" == "feat" ]; then
    SEMVER="minor"
elif [ "$COMMIT_TYPE" == "fix" ]; then
    SEMVER="patch"
else
    SEMVER="patch"
fi

# Update the commit message
echo "$COMMIT_TYPE($COMMIT_SCOPE): $COMMIT_FOOTER - Semantic Version: $SEMVER" > "$COMMIT_MSG_FILE"

exit 0
